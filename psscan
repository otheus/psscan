#!/usr/bin/perl 
# vim:set softtabstop=4 sw=2 ft=perl:
#
# Scan process table and note differences since previous run.
# Start a new set of differences every day
#
# Version: 2.1
# Build Date: 2016-02-05
# 
# 2009-03-29 *otheus*
# 2009-07-01  minor changes for blog
# 2013-10-24  converted to perl and dropped diffing
# 2016-02-05  overhaul: runs more like a daemon than cronjob
# 2016-02-10  send error to logger as child process; logrotate done via filenames

use strict;

#### OPTIONS  PARSER AND CONTAINER 
package opts;
use Getopt::Std;

# For perl newb's: we're actually using the namespace opts to store
# all the options. This allows options to be contained and yet quasi 
# global. Options are set within the pick() sub by symbolic reference
# and are accessed as $opts::VARNAME. Unorthodox but useful.
# Among other things, it allows us to read in a configuration file
# without worrying too much about overwriting local variables. 

my %opts = (
    'c' => "/etc/psscan.conf",
);

sub pick {
    no strict 'refs';
    my $caller = shift;
    my $pkg = qw(opts);
    my ($var,$opt,$default) = @_;
    $$var = exists $opts{$opt}? $opts{$opt} : defined $$var ? $$var : $ENV{$var} ? $ENV{$var} : $default;
    # *{"$callpkg\::$var"} = \&{"$pkg\::$var"};
}

sub init {
    getopts("KIE:i:c:l:r:o:s:",\%opts);
    no strict 'vars'; # we know what we're doing.
    do $opts{'c'} if -r $opts{'c'};

    my $c = caller;
    my $debug= defined $DB::VERSION;
    pick($c,'LOG_DIR','l',($debug?"/tmp/":"/var/log/ps/"));
    $LOG_DIR =~ s/\/?$/\//; # terminate dir with /
    # pick($c,'ROTATE_CONF','r',"/etc/psscan.rotate");
    pick($c,'SHOW_KTHREADS','K',0);
    pick($c,'SHOW_INTERACTIVE','I',0);
    pick($c,'INTERVAL','i',60);
    die "[FATAL] Interval is too short. Set to 10 (s) or greater" 
	unless $INTERVAL >= 10;
    pick($c,'PS_EXEC','E',"/bin/ps");
    die "[FATAL] PS_EXEC does not point to a valid executable" unless -x $PS_EXEC;
    pick($c,'PS_OUTPUT_OPTS','o',
	qw( pid,ppid,sgi_p:2=P,stat:5,c:2,cp:4,pmem:5,rss:8,sz:8,size:8=TSIZE,vsz:8,wchan:10,lstart,args ));
    die "[FATAL] To filter out KThreads, PS_OUTPUT_OPTS must include one of args/cmd/comm and one of rss/sz/vss/vsz/size"
	if $SHOW_KTHREADS == 0 && 
	   $PS_OUTPUT_OPTS !~ /\b(args|comm|cmd)\b/i &&
	   $PS_OUTPUT_OPTS !~ /\b(rss|vss|sz|size)\b/i ;
    pick($c,'PS_SORT_OPTS','s',
	qw( tty,comm,pid ));
}
	
package psscan;
#### Where the cool stuff happens

my $memsz_start;
my $memsz_len;
my $comm_start;
my $comm_len;
my $header;

# Parse header and determine where memory info and command can be found
sub determine_indexes {
    local($_)=shift;
    # Determine column positions from clues in the header.
    if ( /\b\s+(VSZ|SZ|RSS|RSZ)\b/ ) {
      # header is right-aligned; start with whitespace
      $memsz_start = $-[0];
      $memsz_len = $+[1] - $-[0];
    }
    if ( /\b\s*(COMMAND|COMM)(\s*)\b/ ) {
      # header is left-aligned, maybe eol
      $comm_start = $-[1];
      # if eol / last field, set to -1 (removes newline)
      $comm_len = ($+[2] gt $+[1] ? $+[2] - $-[1] : -1 );
    }
}
# Return the process' memory-info field
sub get_sz {
    int(substr($_[0],$memsz_start,$memsz_len));
}
# Return the process' command/arguments field
sub get_cmd {
    substr($_[0],$comm_start,$comm_len);
}
sub is_interactive { 
    $_[1] ne '?'; # has a tty
}
sub is_kthread { 
    $_[1] eq '?' &&	# no tty
    get_sz($_[0])==0 &&	# no memory allocated
    get_cmd($_[0]) =~ /^\[.*\]$/;  # cmd looks like [this:1]
}

# run ps, filter output; save and return multi-lined string.
sub snapshot {
    my $pgrp = shift;
    my $pscmd = shift;
    my $truncate_prefix= ($opts::SHOW_INTERACTIVE ? 9 : 17);

    open(PS,"-|",$pscmd) || die "[ERROR] Cannot run ps command : $!";
    $_ = <PS>;
    if (! defined $header) {
      $header = $_;
      &determine_indexes($_) if $opts::SHOW_KTHREADS == 0;
    }
    my $out = substr($_, $truncate_prefix);
    while (<PS>) {
	my @f=split;
	next if $f[0] eq $pgrp; 	# skip if in our process group
	next if !$opts::SHOW_INTERACTIVE && is_interactive($_,$f[1]);
	next if !$opts::SHOW_KTHREADS && is_kthread($_,$f[1]);
	s/\s+$/\n/s; # trim whitespace, retain newline
	$out .= substr($_, $truncate_prefix);
    }
    close PS;
    return $out;
}


### Main
package main;
use POSIX;

my @ARGV_ORIG = @ARGV;
# Redirect output via logger, unless we're in debug-mode
if (exists $ENV{PSSCAN_DEBUG} || defined $DB::VERSION) {
    warn "[DEBUG] $0 starting up";
} else {
    close(STDOUT);
    *oldstderr = select STDERR;
    open(STDERR,"|logger -t psscan -p user.notice --");
}



# Signal handler for restart-on-HUP
sub reboot {
    warn "[INFO] HUP received: Restarting $0";

    close(STDERR);
    open(STDERR,">&oldstderr");

    # Cancel the sleep (just in case)
    alarm(0);

    # Restart
    exec( $^X, $0, @ARGV_ORIG ) or die "[FATAL] Can't re-exec myself($^X,$0): $!\n";
}

# should_rotate:
#
# Return true if file does NOT exist
# Return true if last mtime on arg1 is older than one day
sub should_rotate {
    my ($file) = @_;
    return 1 if -f !$file;
    return (-s _ && (stat(_))[9] < time - (24*60*60) );
}

### Poor man's rotate
sub rotate { 1 }

sub post_rotate {
    my $file = shift;
    my $newfile = $opts::LOG_DIR . "today";
    system("/bin/ln","-sf", $file, $newfile);
    warn "[ERROR] Failed to link to existing logfile: $file to $newfile" if ($?>>8);
}

sub max2 { ($_[0] > $_[1] ? $_[0] : $_[1] ) }
sub min2 { ($_[0] > $_[1] ? $_[1] : $_[0] ) }

sub calculate_count { 
    use Time::Local 'timelocal_nocheck';
    my $interval = max2(shift,1);
    my $time = shift;
    my ($now,@now)=($time,localtime($time));
    my $midnight=Time::Local::timelocal(59,59,23,@now[3,4,5])+1;
    my $secondsleft = $midnight-$now-1;
    # Return the number of intervals we can perform until midnight. 
    # If $secondsleft <= $interval, we should perfom exactly 1. 
    # If $secondsleft > $interval, we should perform at least 1.
    return int($secondsleft / $interval) + ($secondsleft % $interval ? 1 : 0);
}

my $outfile;

# Process arguments, options, etc
&opts::init;

# Setup output file, directory, autorotate
{ 
    mkdir($opts::LOG_DIR) 
	unless -d $opts::LOG_DIR;
    die "[FATAL] Log directory $opts::LOG_DIR is not writable or cannot be created" 
	unless -w $opts::LOG_DIR;
    $outfile= $opts::LOG_DIR . POSIX::strftime("%Y%m%d",localtime());
    rotate($outfile) if should_rotate($outfile);
    post_rotate($outfile);
}


# Setup HUP handler
{ 
    # From http://www.nntp.perl.org/group/perl.perl5.porters/2002/05/msg58319.html
    # this doesn't work right: $SIG{HUP} = \&reboot;
    my $sigset = POSIX::SigSet->new();
    my $action = POSIX::SigAction->new(
      \&reboot, $sigset, &POSIX::SA_NODEFER);
    POSIX::sigaction(&POSIX::SIGHUP, $action);
}

# Main loop, etc
{ 
    use Fcntl qw(:flock);
    my $count = calculate_count($opts::INTERVAL,time);
    my $pgrp = getpgrp;
    my $pscmd = $opts::PS_EXEC . ' -ww -A --sort ' . $opts::PS_SORT_OPTS .  
	      ' -o pgrp:8,tty:7,' . $opts::PS_OUTPUT_OPTS;

    open (OUT,">>",$outfile) or
	die "[FATAL] Cannot open-for-writing or append to '$outfile': $!";
    flock(OUT,LOCK_EX|LOCK_NB) or do { 
	warn "[INFO] An instance of $0 is already running" if $ENV{PSSCAN_DEBUG};
	exit; 
    };
    warn "[INFO] $0 initialized, writing to $outfile";

    select(OUT); $|=1;
    while ( $count-- > 0 ) {
	my $snapshot = &psscan::snapshot($pgrp,$pscmd);
	print OUT "\n=== " . localtime() . " === (" . time . ") ===\n" . $snapshot . "\l";
    }
    continue {
	# TODO: fix if duration of ps is longer than INTERVAL
	sleep $opts::INTERVAL; #  if $count; always sleep; edge case is 23:59:31
    }
    close OUT;
}

&reboot;

1;
